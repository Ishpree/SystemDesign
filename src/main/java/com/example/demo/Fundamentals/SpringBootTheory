
**Servlet model -> Spring Mvc ->Spring Boot**
Earlier than springboot the servlet model was used where it was complicated to map the API requests to the concerned function, With Spring MVC it is possible
->The @RequestMapping , @GetMapping annotations help the Dispacher servlet identify which controller and which function to use within that controller when a API request comes from the client side. This is the advantage of Spring MVC over the servlet architecture which was earlier used.

->Used with the class where we define configurations
@EnableWebMvc -> Loads lot of dependencies which spring mvc will require.
@ComponentScan(base packages = "xyz")->only within this package ane below you should manage.

Spring Boot solves challenges that exisit with Spring MVC. 
-We dont need to specfically keep track of the versions in the pom.xml and if they are compatible with each other. We only need to define the spring version which is for spring-boot-starter-parent and for the rest the versions automatically get updated as and when required.
-Auto Configuration: No need for seperately configuring dispatcher servlet, app config, or enableWebMVC. component scan and enableWebMvc is not required.
-Component scan automatically makes the application decide that they have to manage everything within the package when the main class is defined.
-Embedded server : In traditional spring mvc application, we have to build a WAR file which is a packaged file containing your application's classes, JSP pages, configuration files and dependencies. 
Then that is deployed in servlet container like tomcat. But spring boot has a embedded container, we just have to run the application
JAR -> Java archive(for standalone java application) -> mostly this is used
WAR -> Web archive(when we need the complete web archive html java script css)

**Architecture:**

            DTO         Entity       Configuration
Clients -> Controller -> Service -> Repository

Configuration  -> application.properties 
We can define some values here instead of the main code, so we can make changes to this file directly without making changes to the code.
Like server port, database username password or some other variable. 

**Maven**:
Project management tool that helps with
->Build generation
->Dependency resolution
->Documentation etc
uses POM(Project Object Model) to achieve this
parts of the pom.xml file
-> project -> It specifies the xml schema
-> parent  -> used to define the parent project  (spring-boot-starter-parent)
group id and artifact id uniquely identify a particular project
properties: Define key-value pair for configuration. Can be referenced though out the pom 
repositories: This is from where the maven look for project dependencies
dependencies: This is where we declare the dependencies and download the jars
build: 
Build lifecycle: Validate phase -> compile->test the code->package compiled code(ex jar or war)->verify the integrity of package ->install the package in local repository ->deploy the package in remote repository



SpringBoot Theory
   
**What is a Bean?**
->Java Object. When the java object is managed by the spring application, it is referred to as Bean.

**What is Spring IOC container?**
->Manages all the beans inside the springboot application along with the dependecies of those beans.
->Bean deletion, bean injection everything will be managed by the IOC container

**What is application context?**
->It is the implementation of the spring IOC container. the terms spring ioc container and application context may be used interchangibly.
->Business object and Configuration Metadata(Annotations)
->Say there is a java object, that java object will be converted to a bean 
using the configurations and then will be stored inside the application context

**2 ways to create a Bean**
->@Component: For example if we are using @service annotation, if we go inside it, there will be a 
component annotation, so whatever annotation we used it will have the component annotation as a part of it.
->@Configuration and @Bean: 

Lets consider spring as a warehouse

When we mark a class as @component or @service or @controller or using @bean. we register it in the warehouse. 
Insted of manually creating objects using new, spring automatically constructs and stores when the application starts
when we user @autowired, its like saying give me the userservice object or repository onkect you created.
so inside a class, lets say controller if we need to use service, we can either do that using constructor injection or using the autowired annotation.


****How to check if the beans are present in application****
->Using actuators:
->using object of application context 

**What is REST(Representational State Transfer) API**
-An architectural style for desgining networked applications. It leverages HTTP methods, GET, POST, PUT, 
DELETE to perform CRUD operations on resources identified by URLs
Its simple, scalable , decouples the client and the server 

**Loose coupling**: When components are independent and have minimal depencies . In microservercies architecture
**Tight coupling**: In monolithic architectures
Mostly loose coupling is only preferred but tight coupling can be benefinical when performance optimization is needed. 

Annotations:
@RequestBody: Use to map the http requet body(ususally json) directly into Java object. Commonly used with post, put, patch requests
@PathVariable: Used to extract data from the url path. Used with get, delete.














